plugins {
    id 'fabric-loom' version '1.10.1'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

println(System.getenv('mc_version'))

// Select Minecraft version dynamically
def mcVersion =  System.getenv('mc_version') ?: project.default_minecraft_version

println(project.default_minecraft_version)

// Dynamically select Yarn Mappings, Fabric API, and Owo Lib
def yarnVersion = project.findProperty("yarn_mappings_${mcVersion.replace('.', '_')}") ?: project.yarn_mappings_1_21_5
def fabricVersion = project.findProperty("fabric_version_${mcVersion.replace('.', '_')}") ?: project.fabric_version_1_21_5
def owoVersion = project.findProperty("owo_version_${mcVersion.replace('.', '_')}") ?: project.owo_version_1_21_5

repositories {
    maven {
        url = uri('https://maven.wispforest.io/releases/')
    }
    maven {
        url = uri('https://maven.fabricmc.net/')
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${mcVersion}"
    mappings "net.fabricmc:yarn:${yarnVersion}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricVersion}"

    // Owo Library
    modImplementation "io.wispforest:owo-lib:${owoVersion}"
    annotationProcessor "io.wispforest:owo-lib:${owoVersion}"
    // include "io.wispforest:owo-lib:${owoVersion}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", mcVersion
    inputs.property "loader_version", project.loader_version
    inputs.property "owoVersion", owoVersion
    filteringCharset = 'UTF-8'

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": mcVersion,
                "loader_version": project.loader_version,
                "owoVersion": owoVersion
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    def finalName = "${project.archives_base_name}+${mcVersion}-${project.version}.jar"
    archiveFileName.set(finalName)

    doLast {
        println "Built JAR: ${archiveFile.get().asFile.name}"
    }

    from("LICENSE") {
        rename { "${it}_${project.archives_base_name}+${mcVersion}" }
    }
}

remapJar {
    archiveFileName.set("${project.archives_base_name}+${mcVersion}-${project.version}.jar")
}


// Configure the Maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

tasks.register("printVersionInfo") {
    doLast {
        println "Building for Minecraft version: ${mcVersion}"
        println "Using Yarn Mappings: ${yarnVersion}"
        println "Using Fabric API: ${fabricVersion}"
        println "Using Owo Library: ${owoVersion}"
    }
}
